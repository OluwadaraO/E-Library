// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id@default(autoincrement())
  firstName String
  lastName String
  schoolID Int
  userName String @unique
  password String
  BorrowedBook BorrowedBook[]
  notifications Notification[]
}

model Admin{
  id Int @id@default(autoincrement())
  firstName String
  lastName String
  userName String @unique
  password String
  notifications Notification[]
  adminNotifications AdminNotification[]
}

model Book {
  id Int @id@default(autoincrement())
  title String @unique
  author String
  image String?
  genre String
  publishingYear Int?
  availabilityStatus Boolean @default(true)
  description String?
  createdAt DateTime @default(now())
  likes Int      @default(0) // Add likes with a default value
  Like             Like[]
  BorrowedBook     BorrowedBook[]
}

model Like {
  id      Int    @id @default(autoincrement())
  userId  Int
  bookId  Int
  book    Book   @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId]) // Ensure each user can like each book only once
}

model BorrowedBook {
  id           Int      @id @default(autoincrement())
  userId       Int
  bookId       Int
  borrowDate   DateTime @default(now())
  returnDueDate DateTime
  user         User     @relation(fields: [userId], references: [id])
  book         Book     @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId]) // Ensure a user cannot borrow the same book multiple times
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int?     // Null for global notifications
  user        User?    @relation(fields: [userId], references: [id])
  adminId     Int?     
  admin       Admin?   @relation(fields: [adminId], references: [id])
  message     String
  type        String   // e.g., "liked", "borrowed", "new-book"
  createdAt   DateTime @default(now())
  read        Boolean  @default(false) // To track whether the notification has been read
  globalReads GlobalNotificationRead[] 
}

model AdminNotification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String
  adminId   Int? 
  admin     Admin?   @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}


model GlobalNotificationRead {
  id                Int          @id @default(autoincrement())
  userId            Int          // User who read the notification
  notificationId    Int          // Global notification ID
  notification      Notification @relation(fields: [notificationId], references: [id])
  read              Boolean      @default(false) // Read status
  deleted           Boolean      @default(false) // Track if the user has deleted the notification
  createdAt         DateTime     @default(now())

  @@unique([userId, notificationId]) // Ensure a user can only have one record per notification
}
